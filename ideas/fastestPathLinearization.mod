param n, integer, > 0; #Number of nodes/edges in the path being tested, a path will always have the same amound of nodes and edges. 

param m, integer, > 0; #Number of linear lines used to model function f(x). 

param edgeDist{i in 1..n}, >= 0; #The length of each edge. edgeDist[1] is the length from s to e1 and edgeDist[n] from en-1 to t.

param chargeConstants{i in 1..n},  >= 0; #In this example we asume that charging speed is constant. 

param batCap, > 0, integer; #The max amount of energy the battery can hold. 

param points{i in 1..n, j in 1..m}; #List of all 1st coordinats.

param points2{i in 1..n, j in 1..m}; #List of all 2ed coordinats. 

param linesA{i in 1..n, j in 1..m}; #List of slopes.

param linesB{i in 1..n, j in 1..m}; #List of konstants, a function i is defined by lineA[i]*x[i]+lineB[i]. 

param speedDistanceRelation{i in 1..n,j in 1..2};

var x{i in 1..n, j in 1..m}; #The optimal speed for each road segment.

var z{i in 1..n, j in 1..m}, integer; #Used to ensure only one line segment is choosen. 

var y{i in 1..n}, >= 0; #The optimal charging time at each charging station.


s.t. OnlyOneLineSeg{i in 1..n}: sum{j in 1..m}(z[i,j]) == 1; 
s.t. ZmustBeBinary{i in 1..n, j in 1..m}: 0 <= z[i,j] <= 1;
s.t. XmustBeOnTheLine{i in 1..n, j in 1..m}: x[i,j] <= z[i,j]*points2[i,j];
s.t. XmustBeBetween{i in 1..n, j in 1..m}: x[i,j] >= z[i,j]*points[i,j];

s.t. NoOverCharge{k in 1..n-1}: 0 <= sum{i in 1..k+1}(chargeConstants[i]*y[i]) - (sum{i in 1..k} edgeDist[i]*(sum{j in 1..m}(linesA[i,j]*x[i,j]) + sum{j in 1..m} linesB[i,j]*z[i,j])) <= batCap;

#Todo fik all units to ensure that all mesures of energy have the exact same units and can be comparied. 
s.t. battery{k in 1..n}: 0 <= sum{i in 1..k}(chargeConstants[i]*y[i]) - (sum{i in 1..k} edgeDist[i]*(sum{j in 1..m}(linesA[i,j]*x[i,j]) + sum{j in 1..m} linesB[i,j]*z[i,j])) <= batCap;

minimize time: sum{i in 1..n} ((speedDistanceRelation[i,1]*(sum{j in 1..m} x[i,j])+speedDistanceRelation[i,2]) + (y[i]));
solve;


display y;
display{i in 1..n} chargeConstants[i]*y[i];
display time;
display x;
display sum{i in 1..n} (y[i]+speedDistanceRelation[i,1]*(sum{j in 1..m} x[i,j])+speedDistanceRelation[i,2]);
display{i in 1..n} edgeDist[i]*(sum{j in 1..m}(linesA[i,j]*x[i,j]) + sum{j in 1..m} linesB[i,j]*z[i,j]);
display{i in 1..n} edgeDist[i]/sum{j in 1..m} x[i,j];
#display sum{i in 1..n} ((edgeDist[i]/sum{j in 1..m} x[i,j]) + (edgeDist[i]*(sum{j in 1..m}(linesA[i,j]*x[i,j]) + sum{j in 1..m} linesB[i,j]*z[i,j])/chargeConstants[i]));

display sum{i in 1..n} ((edgeDist[i]/sum{j in 1..m} x[i,j]) + (y[i]));
display sum{i in 1..n} ((speedDistanceRelation[i,1]*(sum{j in 1..m} x[i,j])+speedDistanceRelation[i,2]) + (y[i]));

data;

param n := 23;
param m := 5;

param batCap := 50;

param points:
1 2 3 4 5  :=
1 72.0 75.6 79.2 82.8 86.4 
2 64.0 67.2 70.4 73.6 76.8 
3 80.8 84.84 88.88 92.92 96.96 
4 92.8 97.44 102.08 106.72 111.36 
5 92.0 96.6 101.2 105.8 110.4 
6 89.6 94.08 98.56 103.04 107.52 
7 91.2 95.76 100.32 104.88 109.44 
8 88.0 92.4 96.8 101.2 105.6 
9 96.0 100.8 105.6 110.4 115.2 
10 40.0 42.0 44.0 46.0 48.0 
11 80.0 84.0 88.0 92.0 96.0 
12 58.4 61.32 64.24 67.16 70.08 
13 67.2 70.56 73.92 77.28 80.64 
14 64.0 67.2 70.4 73.6 76.8 
15 40.0 42.0 44.0 46.0 48.0 
16 56.0 58.8 61.6 64.4 67.2 
17 80.0 84.0 88.0 92.0 96.0 
18 80.0 84.0 88.0 92.0 96.0 
19 81.6 85.68 89.76 93.84 97.92 
20 96.0 100.8 105.6 110.4 115.2 
21 72.0 75.6 79.2 82.8 86.4 
22 32.0 33.6 35.2 36.8 38.4 
23 40.0 42.0 44.0 46.0 48.0 
;
param points2: 
1 2 3 4 5  :=
1 75.6 79.2 82.8 86.4 90.0 
2 67.2 70.4 73.6 76.8 80.0 
3 84.84 88.88 92.92 96.96 101.0 
4 97.44 102.08 106.72 111.36 116.0 
5 96.6 101.2 105.8 110.4 115.0 
6 94.08 98.56 103.04 107.52 112.0 
7 95.76 100.32 104.88 109.44 114.0 
8 92.4 96.8 101.2 105.6 110.0 
9 100.8 105.6 110.4 115.2 120.0 
10 42.0 44.0 46.0 48.0 50.0 
11 84.0 88.0 92.0 96.0 100.0 
12 61.32 64.24 67.16 70.08 73.0 
13 70.56 73.92 77.28 80.64 84.0 
14 67.2 70.4 73.6 76.8 80.0 
15 42.0 44.0 46.0 48.0 50.0 
16 58.8 61.6 64.4 67.2 70.0 
17 84.0 88.0 92.0 96.0 100.0 
18 84.0 88.0 92.0 96.0 100.0 
19 85.68 89.76 93.84 97.92 102.0 
20 100.8 105.6 110.4 115.2 120.0 
21 75.6 79.2 82.8 86.4 90.0 
22 33.6 35.2 36.8 38.4 40.0 
23 42.0 44.0 46.0 48.0 50.0 
;
param speedDistanceRelation: 
 1		2 := 
1 -0.00771604938272 0.694444444444
2 -0.015625 2.25
3 -0.0030634251544 0.309405940594
4 -0.000928953626635 0.10775862069
5 -0.00189035916824 0.217391304348
6 -0.00747369260204 0.837053571429
7 -0.00577100646353 0.657894736842
8 -0.0025826446281 0.284090909091
9 -0.00651041666667 0.78125
10 -0.0075 0.375
11 -0.0025 0.25
12 -0.00703696753612 0.513698630137
13 -0.00177154195011 0.14880952381
14 -0.0068359375 0.546875
15 -0.025 1.25
16 -0.00127551020408 0.0892857142857
17 -0.00125 0.125
18 -0.0125 1.25
19 -0.00540657439446 0.551470588235
20 -0.00173611111111 0.208333333333
21 -0.00385802469136 0.347222222222
22 -0.0078125 0.3125
23 -0.0075 0.375
;
param linesA: 
1 2 3 4 5  :=
1 0.00463096 0.00483688 0.0050428 0.00524872 0.00545464 
2 0.00416192 0.00434496 0.004528 0.00471104 0.00489408 
3 0.005146904 0.005377992 0.00560908 0.005840168 0.006071256 
4 0.005850464 0.006115872 0.00638128 0.006646688 0.006912096 
5 0.00580356 0.00606668 0.0063298 0.00659292 0.00685604 
6 0.005662848 0.005919104 0.00617536 0.006431616 0.006687872 
7 0.005756656 0.006017488 0.00627832 0.006539152 0.006799984 
8 0.00556904 0.00582072 0.0060724 0.00632408 0.00657576 
9 0.00603808 0.00631264 0.0065872 0.00686176 0.00713632 
10 0.0027548 0.0028692 0.0029836 0.003098 0.0032124 
11 0.0051 0.0053288 0.0055576 0.0057864 0.0060152 
12 0.003833592 0.004000616 0.00416764 0.004334664 0.004501688 
13 0.004349536 0.004541728 0.00473392 0.004926112 0.005118304 
14 0.00416192 0.00434496 0.004528 0.00471104 0.00489408 
15 0.0027548 0.0028692 0.0029836 0.003098 0.0032124 
16 0.00369288 0.00385304 0.0040132 0.00417336 0.00433352 
17 0.0051 0.0053288 0.0055576 0.0057864 0.0060152 
18 0.0051 0.0053288 0.0055576 0.0057864 0.0060152 
19 0.005193808 0.005427184 0.00566056 0.005893936 0.006127312 
20 0.00603808 0.00631264 0.0065872 0.00686176 0.00713632 
21 0.00463096 0.00483688 0.0050428 0.00524872 0.00545464 
22 0.00228576 0.00237728 0.0024688 0.00256032 0.00265184 
23 0.0027548 0.0028692 0.0029836 0.003098 0.0032124 
;
param linesB: 
1 2 3 4 5  :=
1 -0.04810552 -0.063673072 -0.079981936 -0.097032112 -0.1148236 
2 -0.01543288 -0.027733168 -0.040619184 -0.054090928 -0.0681484 
3 -0.0884850592 -0.10809056512 -0.12862966656 -0.15010236352 -0.172508656 
4 -0.1510435552 -0.17690491072 -0.20399775936 -0.23232210112 -0.261877936 
5 -0.14660392 -0.172021312 -0.198649056 -0.226487152 -0.2555356 
6 -0.1335156448 -0.15762420928 -0.18288080064 -0.20928541888 -0.236838064 
7 -0.1422027232 -0.16717999552 -0.19334666176 -0.22070272192 -0.249248176 
8 -0.12498232 -0.148237552 -0.172600176 -0.198070192 -0.2246476 
9 -0.16918648 -0.196862128 -0.225855664 -0.256167088 -0.2877964 
10 0.059522 0.0547172 0.0496836 0.0444212 0.03893 
11 -0.084622 -0.1038412 -0.1239756 -0.1450252 -0.16699 
12 0.0051508832 -0.00509102848 -0.01582065024 -0.02703798208 -0.038743024 
13 -0.0280406752 -0.04160174272 -0.05580857536 -0.07066117312 -0.086159536 
14 -0.01543288 -0.027733168 -0.040619184 -0.054090928 -0.0681484 
15 0.059522 0.0547172 0.0496836 0.0444212 0.03893 
16 0.01339592 0.003978512 -0.005887344 -0.016201648 -0.0269644 
17 -0.084622 -0.1038412 -0.1239756 -0.1450252 -0.16699 
18 -0.084622 -0.1038412 -0.1239756 -0.1450252 -0.16699 
19 -0.0923865568 -0.11238221248 -0.13333004224 -0.15523004608 -0.178082224 
20 -0.16918648 -0.196862128 -0.225855664 -0.256167088 -0.2877964 
21 -0.04810552 -0.063673072 -0.079981936 -0.097032112 -0.1148236 
22 0.07681928 0.073744208 0.070522704 0.067154768 0.0636404 
23 0.059522 0.0547172 0.0496836 0.0444212 0.03893 
;
param edgeDist := 1 10, 2 80, 3 5, 4 2, 5 4, 6 15, 7 12, 8 5, 9 15, 10 3, 11 4, 12 6, 13 2, 14 7, 15 10, 16 1, 17 2, 18 20, 19 9, 20 4, 21 5, 22 2, 23 3 ;
param chargeConstants := 1 30, 2 0, 3 0, 4 0, 5 0, 6 15, 7 12, 8 0, 9 15, 10 0, 11 0, 12 0, 13 0, 14 0, 15 0, 16 0, 17 0, 18 20, 19 0, 20 0, 21 0, 22 0, 23 0 ;



